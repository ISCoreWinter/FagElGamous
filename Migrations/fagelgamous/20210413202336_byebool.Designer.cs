// <auto-generated />
using System;
using FagElGamous.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FagElGamous.Migrations.fagelgamous
{
    [DbContext(typeof(fagelgamousContext))]
    [Migration("20210413202336_byebool")]
    partial class byebool
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FagElGamous.Models.BiologicalSamples", b =>
                {
                    b.Property<int>("BioSampleId")
                        .HasColumnName("bio_sample_id")
                        .HasColumnType("int");

                    b.Property<int?>("BagNimber")
                        .HasColumnName("bag_nimber")
                        .HasColumnType("int");

                    b.Property<int>("BurialId")
                        .HasColumnName("burial_id")
                        .HasColumnType("int");

                    b.Property<int?>("ClusterNumber")
                        .HasColumnName("cluster_number")
                        .HasColumnType("int");

                    b.Property<int?>("Day")
                        .HasColumnName("day")
                        .HasColumnType("int");

                    b.Property<string>("Initials")
                        .HasColumnName("initials")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<int?>("Month")
                        .HasColumnName("month")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnName("notes")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<bool?>("PreviouslySampled")
                        .HasColumnName("previously_sampled")
                        .HasColumnType("bit");

                    b.Property<int?>("RackNumber")
                        .HasColumnName("rack_number")
                        .HasColumnType("int");

                    b.Property<int?>("Year")
                        .HasColumnName("year")
                        .HasColumnType("int");

                    b.HasKey("BioSampleId");

                    b.HasIndex("BurialId");

                    b.ToTable("Biological_Samples");
                });

            modelBuilder.Entity("FagElGamous.Models.BodyMeasurements", b =>
                {
                    b.Property<int>("EntryId")
                        .HasColumnName("entry_id")
                        .HasColumnType("int");

                    b.Property<int>("BurialId")
                        .HasColumnName("burial_id")
                        .HasColumnType("int");

                    b.Property<string>("BoneLength")
                        .HasColumnName("bone_length")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("DorsalPitting")
                        .HasColumnName("dorsal_pitting")
                        .HasColumnType("int");

                    b.Property<string>("EpiphysealUnion")
                        .HasColumnName("epiphyseal_union")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double?>("EstimateLivingStature")
                        .HasColumnName("estimate_living_stature")
                        .HasColumnType("float");

                    b.Property<string>("FemurDiameter")
                        .HasColumnName("femur_diameter")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double?>("FemurHead")
                        .HasColumnName("femur_head")
                        .HasColumnType("float");

                    b.Property<double?>("FemurLength")
                        .HasColumnName("femur_length")
                        .HasColumnType("float");

                    b.Property<string>("Humerus")
                        .HasColumnName("humerus")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double?>("HumerusHead")
                        .HasColumnName("humerus_head")
                        .HasColumnType("float");

                    b.Property<double?>("HumerusLength")
                        .HasColumnName("humerus_length")
                        .HasColumnType("float");

                    b.Property<string>("IliacCrest")
                        .HasColumnName("iliac_crest")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MedicalClavicle")
                        .HasColumnName("medical_clavicle")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("MedicalIpRamus")
                        .HasColumnName("medical_IP_ramus")
                        .HasColumnType("int");

                    b.Property<string>("Osteophytosis")
                        .HasColumnName("osteophytosis")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PathologyAnomalies")
                        .HasColumnName("pathology_anomalies")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<int?>("PreaurSulcus")
                        .HasColumnName("preaur_sulcus")
                        .HasColumnType("int");

                    b.Property<string>("PreservationIndex")
                        .HasColumnName("preservation_index")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<int?>("PubicBone")
                        .HasColumnName("pubic_bone")
                        .HasColumnType("int");

                    b.Property<string>("PubicSymphysis")
                        .HasColumnName("pubic_symphysis")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<int?>("SciaticNotch")
                        .HasColumnName("sciatic_notch")
                        .HasColumnType("int");

                    b.Property<int?>("SubpubicAngle")
                        .HasColumnName("subpubic_angle")
                        .HasColumnType("int");

                    b.Property<double?>("TibiaLength")
                        .HasColumnName("tibia_length")
                        .HasColumnType("float");

                    b.Property<int?>("VentralArc")
                        .HasColumnName("ventral_arc")
                        .HasColumnType("int");

                    b.HasKey("EntryId", "BurialId");

                    b.HasIndex("BurialId");

                    b.ToTable("Body_Measurements");
                });

            modelBuilder.Entity("FagElGamous.Models.BurialRecords", b =>
                {
                    b.Property<int>("BurialId")
                        .HasColumnName("burial_id")
                        .HasColumnType("int");

                    b.Property<int?>("Area")
                        .HasColumnName("area")
                        .HasColumnType("int");

                    b.Property<string>("BurialLocationEw")
                        .HasColumnName("burial_location_EW")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("BurialLocationNs")
                        .HasColumnName("burial_location_NS")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("BurialNumber")
                        .HasColumnName("burial_number")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BurialSubplot")
                        .HasColumnName("burial_subplot")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("BuriedGoods")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HighPairEw")
                        .HasColumnName("high_pair_EW")
                        .HasColumnType("int");

                    b.Property<int?>("HighPairNs")
                        .HasColumnName("high_pair_NS")
                        .HasColumnType("int");

                    b.Property<int?>("LowPairEw")
                        .HasColumnName("low_pair_EW")
                        .HasColumnType("int");

                    b.Property<string>("LowPairNs")
                        .HasColumnName("low_pair_NS")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BurialId");

                    b.ToTable("Burial_Records");
                });

            modelBuilder.Entity("FagElGamous.Models.CarbonDating", b =>
                {
                    b.Property<int>("CarbonDatingId")
                        .HasColumnName("carbon_dating_id")
                        .HasColumnType("int");

                    b.Property<int?>("BioSampleId")
                        .HasColumnName("bio_sample_id")
                        .HasColumnType("int");

                    b.Property<int>("BurialId")
                        .HasColumnName("burial_id")
                        .HasColumnType("int");

                    b.Property<int?>("C14Sample2017")
                        .HasColumnName("C14_Sample_2017")
                        .HasColumnType("int");

                    b.Property<double?>("Calibrated95CalendarDateAvg")
                        .HasColumnName("calibrated_95_calendar_date_AVG")
                        .HasColumnType("float");

                    b.Property<int?>("Calibrated95CalendarDateMax")
                        .HasColumnName("calibrated_95_calendar_date_max")
                        .HasColumnType("int");

                    b.Property<int?>("Calibrated95CalendarDateMin")
                        .HasColumnName("calibrated_95_calendar_date_min")
                        .HasColumnType("int");

                    b.Property<int?>("Calibrated95CalendarDateSpan")
                        .HasColumnName("calibrated_95_calendar_date_span")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasColumnName("category")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<int?>("Conventional14cAgeBp")
                        .HasColumnName("conventional_14C_age_BP")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<int?>("Foci")
                        .HasColumnName("foci")
                        .HasColumnType("int");

                    b.Property<string>("LocationDescription")
                        .HasColumnName("location_description")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Notes")
                        .HasColumnName("notes")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<int?>("RackNumber")
                        .HasColumnName("rack_number")
                        .HasColumnType("int");

                    b.Property<string>("ResearchQuestions")
                        .HasColumnName("research_questions")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<int?>("SizeMl")
                        .HasColumnName("size_ml")
                        .HasColumnType("int");

                    b.Property<int?>("TubeNumber")
                        .HasColumnName("tube_number")
                        .HasColumnType("int");

                    b.Property<int?>("_14cCalendarDate")
                        .HasColumnName("_14C_calendar_date")
                        .HasColumnType("int");

                    b.HasKey("CarbonDatingId");

                    b.HasIndex("BioSampleId");

                    b.HasIndex("BurialId");

                    b.ToTable("Carbon_Dating");
                });

            modelBuilder.Entity("FagElGamous.Models.Cranial", b =>
                {
                    b.Property<int>("EntryId")
                        .HasColumnName("entry_id")
                        .HasColumnType("int");

                    b.Property<int>("BurialId")
                        .HasColumnName("burial_id")
                        .HasColumnType("int");

                    b.Property<string>("BasilarSuture")
                        .HasColumnName("basilar_suture")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double?>("BasionBregmaHeight")
                        .HasColumnName("basion_bregma_height")
                        .HasColumnType("float");

                    b.Property<double?>("BasionNasion")
                        .HasColumnName("basion_nasion")
                        .HasColumnType("float");

                    b.Property<double?>("BasionProsthionLength")
                        .HasColumnName("basion_prosthion_length")
                        .HasColumnType("float");

                    b.Property<double?>("BizygomaticDiameter")
                        .HasColumnName("bizygomatic_diameter")
                        .HasColumnType("float");

                    b.Property<string>("ButtonOsteoma")
                        .HasColumnName("button_osteoma")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("CranialSuture")
                        .HasColumnName("cranial_suture")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CribraOrbitala")
                        .HasColumnName("cribra_orbitala")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ForemanMagnum")
                        .HasColumnName("foreman_magnum")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Gonian")
                        .HasColumnName("gonian")
                        .HasColumnType("int");

                    b.Property<double?>("InterorbitalBreadth")
                        .HasColumnName("interorbital_breadth")
                        .HasColumnType("float");

                    b.Property<string>("LinearHypoplasiaEnamel")
                        .HasColumnName("linear_hypoplasia_enamel")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<double?>("MaximumCranialBreadth")
                        .HasColumnName("maximum_cranial_breadth")
                        .HasColumnType("float");

                    b.Property<double?>("MaximumCranialLength")
                        .HasColumnName("maximum_cranial_length")
                        .HasColumnType("float");

                    b.Property<double?>("MaximumNasalBreadth")
                        .HasColumnName("maximum_nasal_breadth")
                        .HasColumnType("float");

                    b.Property<string>("MetopicSuture")
                        .HasColumnName("metopic_suture")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<double?>("NasionProsthion")
                        .HasColumnName("nasion_prosthion")
                        .HasColumnType("float");

                    b.Property<int?>("NuchalCrest")
                        .HasColumnName("nuchal_crest")
                        .HasColumnType("int");

                    b.Property<int?>("OrbitEdge")
                        .HasColumnName("orbit_edge")
                        .HasColumnType("int");

                    b.Property<int?>("ParietalBossing")
                        .HasColumnName("parietal_bossing")
                        .HasColumnType("int");

                    b.Property<string>("PoroticHyperostosis")
                        .HasColumnName("porotic_hyperostosis")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("PoroticHyperostosisLocations")
                        .HasColumnName("porotic_hyperostosis_locations")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("PostcraniaTrauma")
                        .HasColumnName("postcrania_trauma")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Robust")
                        .HasColumnName("robust")
                        .HasColumnType("int");

                    b.Property<int?>("SampleNumber")
                        .HasColumnName("sample_number")
                        .HasColumnType("int");

                    b.Property<int?>("SkullDate")
                        .HasColumnName("skull_date")
                        .HasColumnType("int");

                    b.Property<int?>("SkullMonth")
                        .HasColumnName("skull_month")
                        .HasColumnType("int");

                    b.Property<string>("SkullTrauma")
                        .HasColumnName("skull_trauma")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("SkullYear")
                        .HasColumnName("skull_year")
                        .HasColumnType("int");

                    b.Property<int?>("SupraorbitalRidges")
                        .HasColumnName("supraorbital_ridges")
                        .HasColumnType("int");

                    b.Property<string>("TemporalMandibularJointOsteoarthritisTmjoa")
                        .HasColumnName("temporal_mandibular_joint_osteoarthritis_TMJOA")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ToothAttrition")
                        .HasColumnName("tooth_attrition")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ToothEruption")
                        .HasColumnName("tooth_eruption")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("ZygomaticCrest")
                        .HasColumnName("zygomatic_crest")
                        .HasColumnType("int");

                    b.HasKey("EntryId", "BurialId");

                    b.HasIndex("BurialId");

                    b.ToTable("Cranial");
                });

            modelBuilder.Entity("FagElGamous.Models.MainEntries", b =>
                {
                    b.Property<int>("EntryId")
                        .HasColumnName("entry_id")
                        .HasColumnType("int");

                    b.Property<string>("AgeCode")
                        .HasColumnName("age_code")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("AgeCodeSingle")
                        .HasColumnName("Age_code_single")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("AgeEstimateAtDeath")
                        .HasColumnName("age_estimate_at_death")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("AgeMethod")
                        .HasColumnName("age_method")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("AgeRangeAtDeath")
                        .HasColumnName("age_range_at_death")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("ArtifactFound")
                        .HasColumnName("artifact_found")
                        .HasColumnType("bit");

                    b.Property<string>("ArtifactsDescription")
                        .HasColumnName("artifacts_description")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<int?>("BodyAnalysisYear")
                        .HasColumnName("body_analysis_year")
                        .HasColumnType("int");

                    b.Property<string>("BodySex")
                        .HasColumnName("body_sex")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<bool?>("BoneTaken")
                        .HasColumnName("bone_taken")
                        .HasColumnType("bit");

                    b.Property<string>("BurialDepth")
                        .HasColumnName("burial_depth")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BurialDirection")
                        .HasColumnName("burial_direction")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<int>("BurialId")
                        .HasColumnName("burial_id")
                        .HasColumnType("int");

                    b.Property<string>("BurialPreservation")
                        .HasColumnName("burial_preservation")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("BurialSampleTaken")
                        .HasColumnName("burial_sample_taken")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("BurialSituation")
                        .HasColumnName("burial_situation")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("BurialSouthToFeet")
                        .HasColumnName("burial_SouthToFeet")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BurialSouthToHead")
                        .HasColumnName("burial_SouthTo_Head")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BurialWestToFeet")
                        .HasColumnName("burial_WestToFeet")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BurialWestToHead")
                        .HasColumnName("burial_WestToHead")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BurialWrapping")
                        .HasColumnName("burial_wrapping")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("ByuSample")
                        .HasColumnName("byu_sample")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("Cluster")
                        .HasColumnName("cluster")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ClusterNumber")
                        .HasColumnName("cluster_number")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DataEntryCheckerInitials")
                        .HasColumnName("data_entry_checker_initials")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("DataEntryExpertInitials")
                        .HasColumnName("data_entry_expert_initials")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int?>("DayExcavated")
                        .HasColumnName("day_excavated")
                        .HasColumnType("int");

                    b.Property<string>("DescriptionOfTaken")
                        .HasColumnName("description_of_taken")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("EastToFeet")
                        .HasColumnName("east_to_feet")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("EastToHead")
                        .HasColumnName("east_to_head")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ExcavationRecorderFirstName")
                        .HasColumnName("excavation_recorder_first_name")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ExcavationRecorderLastName")
                        .HasColumnName("excavation_recorder_last_name")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ExcavationRecorderMiddleName")
                        .HasColumnName("excavation_recorder_middle_name")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("FaceBundle")
                        .HasColumnName("face_bundle")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("FieldBook")
                        .HasColumnName("field_book")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("FieldBookPgnumber")
                        .HasColumnName("field_book_pgnumber")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("GamousId")
                        .HasColumnName("gamous_id")
                        .HasColumnType("int");

                    b.Property<string>("GeFunctionTotal")
                        .HasColumnName("GE_function_total")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("GeSex")
                        .HasColumnName("GE_sex")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("Goods")
                        .HasColumnName("goods")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("HairColor")
                        .HasColumnName("hair_color")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("HairColorCode")
                        .HasColumnName("hair_color_code")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<bool?>("HairTaken")
                        .HasColumnName("hair_taken")
                        .HasColumnType("bit");

                    b.Property<string>("HeadDirection")
                        .HasColumnName("head_direction")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<bool?>("InCluster")
                        .HasColumnName("in_cluster")
                        .HasColumnType("bit");

                    b.Property<string>("LengthCm")
                        .HasColumnName("length_CM")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("LengthM")
                        .HasColumnName("length_M")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int?>("MonthExcavated")
                        .HasColumnName("month_excavated")
                        .HasColumnType("int");

                    b.Property<string>("Notes1")
                        .HasColumnName("notes_1")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Notes2")
                        .HasColumnName("notes_2")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Notes3")
                        .HasColumnName("notes_3")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Notes4")
                        .HasColumnName("notes_4")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Notes5")
                        .HasColumnName("notes_5")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Notes6")
                        .HasColumnName("notes_6")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Notes7")
                        .HasColumnName("notes_7")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Notes8")
                        .HasColumnName("notes_8")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Notes9")
                        .HasColumnName("notes_9")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("OsteologyNotes")
                        .HasColumnName("osteology_notes")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<bool?>("OsteologyUnknownComment")
                        .HasColumnName("osteology_unknown_comment")
                        .HasColumnType("bit");

                    b.Property<string>("PostcraniaAtMagazine")
                        .HasColumnName("postcrania_at_magazine")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("RackNumber")
                        .HasColumnName("rack_number")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SexMethod")
                        .HasColumnName("sex_method")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("ShaftNumber")
                        .HasColumnName("shaft_number")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SharedShaft")
                        .HasColumnName("shared_shaft")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("ShelfNumber")
                        .HasColumnName("shelf_number")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SkullAtMagazine")
                        .HasColumnName("skull_at_magazine")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<bool?>("SoftTissueTaken")
                        .HasColumnName("soft_tissue_taken")
                        .HasColumnType("bit");

                    b.Property<bool?>("TextileTaken")
                        .HasColumnName("textile_taken")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("TimeEntered")
                        .HasColumnName("time_entered")
                        .HasColumnType("time");

                    b.Property<string>("ToBeConfirmed")
                        .HasColumnName("to_be_confirmed")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("Tomb")
                        .HasColumnName("tomb")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("ToothTaken")
                        .HasColumnName("tooth_taken")
                        .HasColumnType("bit");

                    b.Property<int?>("YearExcavated")
                        .HasColumnName("year_excavated")
                        .HasColumnType("int");

                    b.HasKey("EntryId");

                    b.HasIndex("BurialId");

                    b.ToTable("Main_Entries");
                });

            modelBuilder.Entity("FagElGamous.Models.Photos", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("photo_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BurialId")
                        .HasColumnName("burial_id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Filestring")
                        .HasColumnName("filestring")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("PhotoId")
                        .HasName("PK__photos__CB48C83DDDE8113D");

                    b.HasIndex("BurialId");

                    b.ToTable("photos");
                });

            modelBuilder.Entity("FagElGamous.Models.BiologicalSamples", b =>
                {
                    b.HasOne("FagElGamous.Models.BurialRecords", "Burial")
                        .WithMany("BiologicalSamples")
                        .HasForeignKey("BurialId")
                        .HasConstraintName("FK__Biologica__buria__4F7CD00D")
                        .IsRequired();
                });

            modelBuilder.Entity("FagElGamous.Models.BodyMeasurements", b =>
                {
                    b.HasOne("FagElGamous.Models.BurialRecords", "Burial")
                        .WithMany("BodyMeasurements")
                        .HasForeignKey("BurialId")
                        .HasConstraintName("FK__Body_Meas__buria__4CA06362")
                        .IsRequired();

                    b.HasOne("FagElGamous.Models.MainEntries", "Entry")
                        .WithMany("BodyMeasurements")
                        .HasForeignKey("EntryId")
                        .HasConstraintName("FK__Body_Meas__entry__4BAC3F29")
                        .IsRequired();
                });

            modelBuilder.Entity("FagElGamous.Models.CarbonDating", b =>
                {
                    b.HasOne("FagElGamous.Models.BiologicalSamples", "BioSample")
                        .WithMany("CarbonDating")
                        .HasForeignKey("BioSampleId")
                        .HasConstraintName("FK__Carbon_Da__bio_s__534D60F1");

                    b.HasOne("FagElGamous.Models.BurialRecords", "Burial")
                        .WithMany("CarbonDating")
                        .HasForeignKey("BurialId")
                        .HasConstraintName("FK__Carbon_Da__buria__52593CB8")
                        .IsRequired();
                });

            modelBuilder.Entity("FagElGamous.Models.Cranial", b =>
                {
                    b.HasOne("FagElGamous.Models.BurialRecords", "Burial")
                        .WithMany("Cranial")
                        .HasForeignKey("BurialId")
                        .HasConstraintName("FK__Cranial__burial___47DBAE45")
                        .IsRequired();

                    b.HasOne("FagElGamous.Models.MainEntries", "Entry")
                        .WithMany("Cranial")
                        .HasForeignKey("EntryId")
                        .HasConstraintName("FK__Cranial__entry_i__48CFD27E")
                        .IsRequired();
                });

            modelBuilder.Entity("FagElGamous.Models.MainEntries", b =>
                {
                    b.HasOne("FagElGamous.Models.BurialRecords", "Burial")
                        .WithMany("MainEntries")
                        .HasForeignKey("BurialId")
                        .HasConstraintName("FK__Main_Entr__buria__44FF419A")
                        .IsRequired();
                });

            modelBuilder.Entity("FagElGamous.Models.Photos", b =>
                {
                    b.HasOne("FagElGamous.Models.BurialRecords", "Burial")
                        .WithMany("Photos")
                        .HasForeignKey("BurialId")
                        .HasConstraintName("FK__photos__burial_i__5CD6CB2B");
                });
#pragma warning restore 612, 618
        }
    }
}
